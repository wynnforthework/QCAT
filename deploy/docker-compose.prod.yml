version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: qcat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: qcat
      POSTGRES_USER: qcat
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qcat_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${QCAT_PORTS_POSTGRES:-5432}:5432"
    networks:
      - qcat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qcat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qcat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${QCAT_PORTS_REDIS:-6379}:6379"
    networks:
      - qcat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY:-your-org/qcat}/qcat-backend:latest
    container_name: qcat-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=qcat
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-qcat_password}
      - POSTGRES_DB=qcat
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
      - API_KEY=${API_KEY:-your_api_key}
      - API_SECRET=${API_SECRET:-your_api_secret}
      - QCAT_SERVER_PORT=${QCAT_PORTS_QCAT_API:-8082}
    ports:
      - "${QCAT_PORTS_QCAT_API:-8082}:${QCAT_PORTS_QCAT_API:-8082}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qcat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${QCAT_PORTS_QCAT_API:-8082}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs

  # 前端应用
  frontend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY:-your-org/qcat}/qcat-frontend:latest
    container_name: qcat-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:${QCAT_PORTS_QCAT_API:-8082}
    ports:
      - "${QCAT_PORTS_NGINX_HTTP:-80}:80"
      - "${QCAT_PORTS_NGINX_HTTPS:-443}:443"
    depends_on:
      - backend
    networks:
      - qcat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: qcat-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - qcat-network

  # Grafana仪表盘
  grafana:
    image: grafana/grafana:latest
    container_name: qcat-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - qcat-network

  # AlertManager告警
  alertmanager:
    image: prom/alertmanager:latest
    container_name: qcat-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - qcat-network

  # Nginx反向代理（可选，用于SSL终止）
  nginx-proxy:
    image: nginx:alpine
    container_name: qcat-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - qcat-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  qcat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
