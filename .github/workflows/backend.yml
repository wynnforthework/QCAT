name: Backend CI/CD

on:
  push:
    branches: [ main, dev ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/backend.yml'
      - 'deploy/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/backend.yml'
      - 'deploy/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/qcat-backend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qcat_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: qcat_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: backend
        fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build binary
      run: |
        go build -v -ldflags="-s -w" -o qcat ./cmd/qcat
        tar czf qcat.tar.gz qcat

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: qcat-binary
        path: qcat.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: qcat-binary
        path: ./dist

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Deploy to staging server
      run: |
        # 解压二进制文件
        tar xzf ./dist/qcat.tar.gz -C ./dist/
        
        # 连接到staging服务器并部署
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          # 停止现有服务
          sudo systemctl stop qcat-staging || true
          
          # 备份当前版本
          sudo cp /opt/qcat-staging/qcat /opt/qcat-staging/qcat.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # 创建目录
          sudo mkdir -p /opt/qcat-staging
          sudo mkdir -p /var/log/qcat-staging
          
          # 设置权限
          sudo chown -R $USER:$USER /opt/qcat-staging
          sudo chown -R $USER:$USER /var/log/qcat-staging
        EOF
        
        # 上传新版本
        scp -o StrictHostKeyChecking=no ./dist/qcat ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/opt/qcat-staging/
        
        # 配置和启动服务
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          # 设置执行权限
          chmod +x /opt/qcat-staging/qcat
          
          # 创建systemd服务文件
          sudo tee /etc/systemd/system/qcat-staging.service > /dev/null << 'SERVICE_EOF'
          [Unit]
          Description=QCAT Trading System - Staging
          After=network.target postgresql.service redis.service
          
          [Service]
          Type=simple
          User=qcat
          Group=qcat
          WorkingDirectory=/opt/qcat-staging
          ExecStart=/opt/qcat-staging/qcat
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          Environment=NODE_ENV=staging
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          # 重新加载systemd
          sudo systemctl daemon-reload
          
          # 启动服务
          sudo systemctl start qcat-staging
          sudo systemctl enable qcat-staging
          
          # 等待服务启动
          sleep 10
          
          # 检查服务状态
          sudo systemctl status qcat-staging
        EOF

    - name: Health check staging
      run: |
        # 等待服务完全启动
        sleep 30
        
        # 健康检查
        for i in {1..5}; do
          if curl -f http://${{ secrets.STAGING_HOST }}:8080/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/5"
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          fi
        done

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: qcat-binary
        path: ./dist

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Deploy to production server
      run: |
        # 解压二进制文件
        tar xzf ./dist/qcat.tar.gz -C ./dist/
        
        # 连接到production服务器并部署
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          # 停止现有服务
          sudo systemctl stop qcat-production || true
          
          # 备份当前版本
          sudo cp /opt/qcat-production/qcat /opt/qcat-production/qcat.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # 创建目录
          sudo mkdir -p /opt/qcat-production
          sudo mkdir -p /var/log/qcat-production
          
          # 设置权限
          sudo chown -R $USER:$USER /opt/qcat-production
          sudo chown -R $USER:$USER /var/log/qcat-production
        EOF
        
        # 上传新版本
        scp -o StrictHostKeyChecking=no ./dist/qcat ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/qcat-production/
        
        # 配置和启动服务
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          # 设置执行权限
          chmod +x /opt/qcat-production/qcat
          
          # 创建systemd服务文件
          sudo tee /etc/systemd/system/qcat-production.service > /dev/null << 'SERVICE_EOF'
          [Unit]
          Description=QCAT Trading System - Production
          After=network.target postgresql.service redis.service
          
          [Service]
          Type=simple
          User=qcat
          Group=qcat
          WorkingDirectory=/opt/qcat-production
          ExecStart=/opt/qcat-production/qcat
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          Environment=NODE_ENV=production
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          # 重新加载systemd
          sudo systemctl daemon-reload
          
          # 启动服务
          sudo systemctl start qcat-production
          sudo systemctl enable qcat-production
          
          # 等待服务启动
          sleep 10
          
          # 检查服务状态
          sudo systemctl status qcat-production
        EOF

    - name: Health check production
      run: |
        # 等待服务完全启动
        sleep 30
        
        # 健康检查
        for i in {1..5}; do
          if curl -f http://${{ secrets.PRODUCTION_HOST }}:8080/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/5"
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          fi
        done

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment completed successfully!"
        # 这里可以添加通知逻辑，如Slack、钉钉等
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"QCAT Production deployment successful!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          # 停止新版本
          sudo systemctl stop qcat-production
          
          # 恢复备份版本
          BACKUP_FILE=$(ls -t /opt/qcat-production/qcat.backup.* | head -1)
          if [ -n "$BACKUP_FILE" ]; then
            sudo cp "$BACKUP_FILE" /opt/qcat-production/qcat
            sudo systemctl start qcat-production
            echo "Rollback completed"
          else
            echo "No backup found for rollback"
          fi
        EOF
